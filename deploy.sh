#!/bin/bash

# üåæ AgroRent - Script de Despliegue con Docker
# Este script despliega AgroRent usando Docker Compose

set -e  # Salir si hay alg√∫n error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes con colores
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  üåæ AgroRent - Despliegue      ${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Funci√≥n para verificar Docker
check_docker() {
    print_message "Verificando Docker..."
    
    if command -v docker >/dev/null 2>&1; then
        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        print_message "‚úÖ Docker $DOCKER_VERSION encontrado"
        return 0
    else
        print_error "‚ùå Docker no encontrado"
        return 1
    fi
}

# Funci√≥n para verificar Docker Compose
check_docker_compose() {
    print_message "Verificando Docker Compose..."
    
    if command -v docker-compose >/dev/null 2>&1; then
        COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
        print_message "‚úÖ Docker Compose $COMPOSE_VERSION encontrado"
        return 0
    else
        print_error "‚ùå Docker Compose no encontrado"
        return 1
    fi
}

# Funci√≥n para detener contenedores existentes
stop_existing() {
    print_message "Deteniendo contenedores existentes..."
    
    if docker-compose ps -q | grep -q .; then
        docker-compose down --remove-orphans
        print_message "‚úÖ Contenedores detenidos"
    else
        print_message "‚ÑπÔ∏è  No hay contenedores ejecut√°ndose"
    fi
}

# Funci√≥n para construir y ejecutar
build_and_run() {
    print_message "Construyendo y ejecutando AgroRent con Docker..."
    
    if docker-compose up --build -d; then
        print_message "‚úÖ AgroRent desplegado exitosamente"
    else
        print_error "‚ùå Error al desplegar AgroRent"
        exit 1
    fi
}

# Funci√≥n para verificar estado
check_status() {
    print_message "Verificando estado de los servicios..."
    
    # Esperar un poco para que los servicios se inicien
    sleep 10
    
    if docker-compose ps | grep -q "Up"; then
        print_message "‚úÖ Servicios ejecut√°ndose correctamente"
        
        # Mostrar estado de los contenedores
        echo ""
        print_message "Estado de los contenedores:"
        docker-compose ps
        
        # Mostrar logs de la aplicaci√≥n
        echo ""
        print_message "√öltimos logs de la aplicaci√≥n:"
        docker-compose logs --tail=10 app
        
    else
        print_error "‚ùå Los servicios no se est√°n ejecutando correctamente"
        print_message "Logs de error:"
        docker-compose logs
        exit 1
    fi
}

# Funci√≥n para mostrar informaci√≥n de acceso
show_access_info() {
    echo ""
    print_message "üéâ ¬°AgroRent est√° ejecut√°ndose!"
    echo ""
    echo -e "${GREEN}üì± URLs de acceso:${NC}"
    echo "  ‚Ä¢ Aplicaci√≥n: http://localhost:8080/recetas"
    echo "  ‚Ä¢ P√°gina de inicio: http://localhost:8080/"
    echo "  ‚Ä¢ B√∫squeda: http://localhost:8080/machinery"
    echo "  ‚Ä¢ Login: http://localhost:8080/login"
    echo ""
    echo -e "${GREEN}üë• Cuentas de prueba:${NC}"
    echo "  ‚Ä¢ Admin: admin@agro.cl / 123456"
    echo "  ‚Ä¢ Usuario: juan@agro.cl / 123456"
    echo "  ‚Ä¢ Usuario: maria@agro.cl / 123456"
    echo ""
    echo -e "${GREEN}üóÑÔ∏è Base de datos:${NC}"
    echo "  ‚Ä¢ MySQL: localhost:3306"
    echo "  ‚Ä¢ Usuario: agrouser"
    echo "  ‚Ä¢ Contrase√±a: agropass"
    echo "  ‚Ä¢ Base de datos: agrorent"
    echo ""
    echo -e "${GREEN}üîß Comandos √∫tiles:${NC}"
    echo "  ‚Ä¢ Ver logs: docker-compose logs -f"
    echo "  ‚Ä¢ Detener: docker-compose down"
    echo "  ‚Ä¢ Reiniciar: docker-compose restart"
    echo "  ‚Ä¢ Estado: docker-compose ps"
}

# Funci√≥n para monitorear logs
monitor_logs() {
    print_message "¬øDeseas monitorear los logs en tiempo real? (y/n)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        print_message "Monitoreando logs... (Presiona Ctrl+C para salir)"
        docker-compose logs -f
    fi
}

# Funci√≥n principal
main() {
    print_header
    
    # Verificar si estamos en el directorio correcto
    if [ ! -f "docker-compose.yml" ]; then
        print_error "‚ùå No se encontr√≥ docker-compose.yml. Ejecuta este script desde el directorio ra√≠z del proyecto."
        exit 1
    fi
    
    # Verificar dependencias
    print_message "Verificando dependencias..."
    
    if ! check_docker; then
        print_error "‚ùå Docker no est√° instalado. Inst√°lalo desde: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! check_docker_compose; then
        print_error "‚ùå Docker Compose no est√° instalado. Inst√°lalo desde: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    # Detener contenedores existentes
    stop_existing
    
    # Construir y ejecutar
    build_and_run
    
    # Verificar estado
    check_status
    
    # Mostrar informaci√≥n de acceso
    show_access_info
    
    # Preguntar si monitorear logs
    monitor_logs
}

# Ejecutar funci√≥n principal
main "$@"